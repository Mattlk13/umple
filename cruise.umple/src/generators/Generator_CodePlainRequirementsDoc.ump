/*Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
http://umple.org/license

This generates simple metrics from Umple
  generate PlainRequirementsDoc;
in your umple file, or the command line option
  -g PlainRequirementsDoc
*/

namespace cruise.umple.compiler;

class PlainRequirementsDocGenerator
{
  isA CodeGenerator;
  depend java.io.*;
  depend java.util.*;
  depend cruise.umple.util.*;
  depend cruise.umple.compiler.exceptions.*;
  depend java.util.Map.Entry;
  depend java.util.Set;
  
  
  UmpleModel model = null;
  String output = "";

  HtmlDocument doc = new HtmlDocument(true);

  void generate(){
    doc.createParagraphElement("Plain Requirements Doc from "+model.getUmpleFile().getSimpleFileName()+".ump", false);
    UmpleModelWalker walker = new UmpleModelWalker(model);
    // This is the first comparator that compares by the statement of the requirement
    Comparator<Requirement> StatComparator = new Comparator<Requirement>() {
    @Override
    public int compare(Requirement r1, Requirement r2) {
        String v1 = r1.getStatement();
        String v2 = r2.getStatement();
        return v1.compareTo(v2);
    }
   };

    // This is the second comparator that compares by the identifier of the requirement
    Comparator<Requirement> IDComparator = new Comparator<Requirement>() {
    @Override
    public int compare(Requirement r1, Requirement r2) {
        String v1 = r1.getIdentifier();
        String v2 = r2.getIdentifier();
        return v1.compareTo(v2);
    }
   };

  // Initializing a new instance of the TreeSet called ReqTreeSet and passing the statement comparator
  TreeSet<Requirement> ReqTreeSet = new TreeSet<Requirement>(StatComparator);

  // Looping through the model's requirements to add it to the initialized TreeSet
  for (Map.Entry<String, Requirement> entry : model.getAllRequirements().entrySet()) {
      ReqTreeSet.add(entry.getValue());
  }

  // Creating paragraph elements from the TreeSet
  for (Requirement x : ReqTreeSet) {
      String text = Requirement.translateToHTML(x.getStatement(), x.getLanguage());
      doc.createParagraphElement("" + x.getIdentifier() + ": " + text, false);
  }

    model.setCode(doc.toString());
    writeModel();
    return;
  }
  
  void writeModel(){
    try {
      String path = model.getUmpleFile().getPath();
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName() + ".html";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e) {
      throw new UmpleCompilerException("There was a problem with generating RequirementDoc code. ;)" + e, e);
    }
  }
}



