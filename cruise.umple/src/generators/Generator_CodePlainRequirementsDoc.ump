/*Copyright: All contributers to the Umple Project

This file is made available subject to the open source license found at:
https://umple.org/license

This generates simple metrics from Umple
  generate PlainRequirementsDoc;
in your umple file, or the command line option
  -g PlainRequirementsDoc
*/

namespace cruise.umple.compiler;

class PlainRequirementsDocGenerator
{
  isA CodeGenerator;
  depend java.io.*;
  depend java.util.*;
  depend cruise.umple.util.*;
  depend cruise.umple.compiler.exceptions.*;
  depend cruise.umple.parser.Token;
  
  
  UmpleModel model = null;
  String output = "";

  HtmlDocument doc = new HtmlDocument(true);

  void generate(){
    doc.createParagraphElement("Plain Requirements Doc from "+model.getUmpleFile().getSimpleFileName()+".ump", false);
    UmpleModelWalker walker = new UmpleModelWalker(model);
    // Intializing the TreeSet
    TreeSet<Requirement> ReqTreeSet;
    // Intializing the Comparator and assigning it to a default which is to sort by the identifier
    // This applies to default case including "PlainRequirementsDoc", "reqSortID" 
    Comparator<Requirement> defaultComparator = (r1, r2) -> r1.getIdentifier().compareTo(r2.getIdentifier());
    if (model.modelHasSuboption("PlainRequirementsDoc", "reqSortStat")) {
      // If -s reqSortStat is present the comparator is changed to be assigned to statement
      defaultComparator = (r1, r2) -> r1.getStatement().compareTo(r2.getStatement());
    } 
    // The TreeSet is created based on the chosen comparator
    ReqTreeSet = new TreeSet<>(defaultComparator);
    // Add all requirements found in the model to the TreeSet 
    ReqTreeSet.addAll(model.getAllRequirements().values());
    // Assigning the suboption to a variable 
    boolean hasreqHideNotImpl = model.modelHasSuboption("PlainRequirementsDoc", "reqHideNotImpl");
    // Assigning a variable to hold the filename so it can be output in the implemented by section
    String fileName = model.getUmpleFile().getSimpleFileName()+".ump";
    // Loop through the sorted reqs in the TreeSet and check if they have an implementation
    for (Requirement req : ReqTreeSet){
    	if (req.hasReqImplementations() || !hasreqHideNotImpl) {
    	  // Below string stores the requirement statement and language and translates to html
    	  String mainReqText = Requirement.translateToHTML(req.getStatement(), req.getLanguage());
    	  // Below string will store the details like class, attribute, association and state
    	  String implText="";
    	  // Check if the requirement is implemented
          if(req.hasReqImplementations()) {
            // Append the text with this prompt
            implText= " IMPLEMENTED BY: ";
            // Loop through classes to check for attributes that have implementations
            for (UmpleClass aClass : getModel().getUmpleClasses())
   	    {
	      for (Attribute att : aClass.getAttributes())
	      { 
	        if(att.hasReqImplementations()){
	          implText += " "+att.getName()+" ; ";
	        }
	        
	      }
	      // Loop through classes to check for state machines that have implementations
	      for (StateMachine sm : aClass.getStateMachines())
	      { 
	        if(sm.hasReqImplementations()){
	          implText += " "+sm.getName()+" ; ";
	          for (State s : sm.getStates())
	          {
	            //print statement  below returns false
	            // There is an issue with linking states with reqImplementation
	            System.out.println("State has reqimpl: "+s.hasReqImplementations());
	          }
	        }
	      }
	      // Loop through classes to check for associations that have implementations
	      for (AssociationVariable as : aClass.getAssociationVariables())
	      {
	        System.out.println("It is implemented by an association!");
	        if(as.hasReqImplementations()){
	          implText += " "+as.getName()+" ; ";
	        }
	      
	      }
	      // We always have to print the class name in the implemented by block
	      implText += "In Class: "+aClass.getName() +"; "; 
	    }
	    // Appending the file name to the text
	    implText += "In File: "+ fileName + "; ";
	    // Below is done to get the position of the implements req statement so it can be displayed in the block
	    List<ReqImplementation> ReqImp = new ArrayList<ReqImplementation>(); 
	    ReqImp = model.getReqImplementations();
	    for (ReqImplementation reqImpl : ReqImp)
	    {
              implText += " At line number: "+ reqImpl.getReqToken().getPosition().getLineNumber()+ "; ";
	    }
          }
          else {
            // If the requirement does not have an implementation
            implText="NOT IMPLEMENTED.";
          }
          // Create the paragraph elements
          doc.createParagraphElement("" + req.getIdentifier() + ": " + mainReqText+implText, false);
    	}
    }
    model.setCode(doc.toString());
    writeModel();
    return;
  }
  
  void writeModel(){
    try {
      String path = model.getUmpleFile().getPath();
      File file = new File(path);
      file.mkdirs();
      String modelFilename = path + File.separator + model.getUmpleFile().getSimpleFileName() + ".html";
      BufferedWriter bw = new BufferedWriter(new FileWriter(modelFilename));
      bw.write(model.getCode());
      bw.flush();
      bw.close();
    }
    catch (Exception e) {
      throw new UmpleCompilerException("There was a problem with generating RequirementDoc code. ;)" + e, e);
    }
  }
}

